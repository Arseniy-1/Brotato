//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurentHP;

    public static Entitas.IMatcher<GameEntity> CurentHP {
        get {
            if (_matcherCurentHP == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurentHP);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurentHP = matcher;
            }

            return _matcherCurentHP;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Lifetime.CurentHP curentHP { get { return (Code.Gameplay.Features.Lifetime.CurentHP)GetComponent(GameComponentsLookup.CurentHP); } }
    public float CurentHP { get { return curentHP.Value; } }
    public bool hasCurentHP { get { return HasComponent(GameComponentsLookup.CurentHP); } }

    public GameEntity AddCurentHP(float newValue) {
        var index = GameComponentsLookup.CurentHP;
        var component = (Code.Gameplay.Features.Lifetime.CurentHP)CreateComponent(index, typeof(Code.Gameplay.Features.Lifetime.CurentHP));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCurentHP(float newValue) {
        var index = GameComponentsLookup.CurentHP;
        var component = (Code.Gameplay.Features.Lifetime.CurentHP)CreateComponent(index, typeof(Code.Gameplay.Features.Lifetime.CurentHP));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCurentHP() {
        RemoveComponent(GameComponentsLookup.CurentHP);
        return this;
    }
}
